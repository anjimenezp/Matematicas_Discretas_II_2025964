# ### IMPORT
from itertools import permutations

# ### LOGICA
# --- METODO: Dividir digito por digito
def divDig(c):
  # declaramos matrices
  mtz1=[]
  mtz2=[]
  for letra in str(c):
    mtz1.append(letra)
  mur = sorted(permutations(mtz1))
  i = 1
  for p in mur:
    mtz2.append([i,p])
    i+=1
  print("\n Permutaciones: \n")
  for p in mtz2:
    print(p)
  proced(mtz2)  

# --- METODO: Procedimiento
def proced(matriz):
  size = len(matriz) + 1
  print (size)
  matr = []
  for i in range(0, size):
    mil = []
    for j in range(0, size):
      if(i == 0 and j == 0):
        print("                          ", end=" ")
      elif(i == 0 and j != 0):
        print (matriz[j-1][1], end=" ")
      elif(j==0 and i != 0):
        print (matriz[i-1][1], end=" ")
      elif(i != 0 and j != 0):
        a=(comp(matriz[i-1][1], matriz[j-1][1]))
        mil.append(a)
        print (a, end=" ")
    matr.append(mil)
    print(" ")

# --- METODO: Composición de función permutar
def comp(m1, m2):
  m3 = [m2[int(m1[0])-1], m2[int(m1[1])-1], m2[int(m1[2])-1], m2[int(m1[3])-1], m2[int(m1[4])-1]]
  return m3

divDig(12345)